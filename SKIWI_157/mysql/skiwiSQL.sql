CREATE DATABASE IF NOT EXISTS SKIWI_DB;

USE SKIWI_DB;

CREATE TABLE IF NOT EXISTS Purchasable_Items (
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	CATEGORY					VARCHAR(30)		NOT NULL,
	PURCHASABLE_ITEM_NAME		VARCHAR(30)		NOT NULL,
	ITEM_COST					NUMERIC(6, 2)	NOT NULL,
	DISCOUNT_PERCENTAGE			NUMERIC  		NOT NULL	CHECK (DISCOUNT_PERCENTAGE >= 0 AND DISCOUNT_PERCENTAGE <= 100),
	PRIMARY KEY (PURCHASABLE_ID)
);

CREATE TABLE IF NOT EXISTS Lessons(
	LESSON_ID 					CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	LESSON_NAME					VARCHAR(30)		NOT NULL,
	LESSON_LEVEL				VARCHAR(20)		NOT NULL,
	PRICE						NUMERIC(6, 2)	NOT NULL,
	INSTRUCTOR_NAME				VARCHAR(128)	NOT NULL,
	INSTRUCTOR_SKILL_LEVEL		VARCHAR(50)		NOT NULL,
	PRIMARY KEY (LESSON_ID),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID)
);


CREATE TABLE IF NOT EXISTS Customer (
	CUSTOMER_ID					CHAR(10)		NOT NULL,
	EMAIL						VARCHAR(128)	NOT NULL,
	PASWD						VARCHAR(30)		NOT NULL,
	FIRST_NAME					VARCHAR(64)		NOT NULL,
	LAST_NAME					VARCHAR(64)		NOT NULL,
	LESSON_ID					CHAR(10),
	PHONE_NUMBER				VARCHAR(14)		NOT NULL,
	AGE							SMALLINT 		NOT NULL	CHECK (AGE >= 0 AND AGE <= 200),
	CREDIT_CARD_NUMBER			VARCHAR(16) CHECK (LENGTH (CREDIT_CARD_NUMBER) = 16),
	CREDIT_CARD_SECURITY_CODE	VARCHAR(3) CHECK (LENGTH (CREDIT_CARD_SECURITY_CODE) = 3),
	CREDIT_CARD_PROVIDER		VARCHAR(20),
	NAME_ON_CREDIT_CARD			VARCHAR(128),
	PRIMARY KEY (CUSTOMER_ID),
	FOREIGN KEY (LESSON_ID) REFERENCES Lessons (LESSON_ID)
);


CREATE TABLE IF NOT EXISTS Ski_Conditions (
	DAY							date			NOT NULL,
	SKI_LANE_ID					CHAR(10)		NOT NULL,
	WEATHER_CONDITION			VARCHAR(30)		NOT NULL,
	TEMPERATURE					NUMERIC  		NOT NULL	CHECK (TEMPERATURE >= -100 AND TEMPERATURE <= 150),
	WIND_SPEEDS					NUMERIC  		NOT NULL	CHECK (WIND_SPEEDS >= 0 AND WIND_SPEEDS <= 100),
	SNOW_CONDITION				VARCHAR(50)		NOT NULL,
	LANE_DIFFICULTY				VARCHAR(30)		NOT NULL,
	LANE_ALTITUDE				NUMERIC(6, 2)	NOT NULL,
	LANE_NAME					VARCHAR(64)		NOT NULL,
	OPEN						INTEGER			NOT NULL CHECK (OPEN IN(0 ,1)),
	PRIMARY KEY (DAY, SKI_LANE_ID)
);


CREATE TABLE IF NOT EXISTS Cart (
	CART_ID						CHAR(10)		NOT NULL,
	CUSTOMER_ID					CHAR(10)		NOT NULL,
	TOTAL_COST					NUMERIC(6, 2)	NOT NULL,
	PRIMARY KEY (CART_ID),
	FOREIGN KEY (CUSTOMER_ID) REFERENCES Customer (CUSTOMER_ID)
);

CREATE TABLE IF NOT EXISTS Cart_Details (
	CART_ID						CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	QUANTITY					INT				NOT NULL,
	PRIMARY KEY (CART_ID, PURCHASABLE_ID),
	FOREIGN KEY (CART_ID) REFERENCES Cart (CART_ID),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID)
);


CREATE TABLE IF NOT EXISTS Tickets (
	TICKET_ID					CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	TICKET_NAME					VARCHAR(64)		NOT NULL,
	DESCRIPTION					TEXT			NOT NULL,
	FULL_PRICE					NUMERIC(6, 2)	NOT NULL,
	DAY							date			NOT NULL,
	PRIMARY KEY (TICKET_ID),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID)
);


CREATE TABLE IF NOT EXISTS Rental_Item (
	RENTAL_ID					CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	BRAND						VARCHAR(64),
	NAME						VARCHAR(64)		NOT NULL,
	DESCRIPTION					TEXT			NOT NULL,
	PRICE						NUMERIC(6, 2)	NOT NULL,
	AGE_GROUP					VARCHAR(30)		NOT NULL,
	PRIMARY KEY (RENTAL_ID),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID)
);

CREATE TABLE IF NOT EXISTS Lodges (
	LODGE_ID					CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	LODGE_NAME					VARCHAR(128)		NOT NULL,
	LODGE_ADDRESS				VARCHAR(128)		NOT NULL,
	LODGE_SIZE					INT				NOT NULL,
	HOST_CONTACT				VARCHAR(14)		NOT NULL,
	NIGHTLY_RATES				NUMERIC(6, 2)	NOT NULL,
	DESCRIPTION				TEXT		NOT NULL,
	PRIMARY KEY (LODGE_ID),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID)
);


CREATE TABLE IF NOT EXISTS Lodge_Amenities (
	LODGE_ID					CHAR(10)		NOT NULL,
	AMENITY_ID					CHAR(10)		NOT NULL,
	AMENITY_DESCRIPTION			TEXT			NOT NULL,
	PRIMARY KEY (LODGE_ID, AMENITY_ID),
	FOREIGN KEY (LODGE_ID) REFERENCES Lodges (LODGE_ID)
);



CREATE TABLE IF NOT EXISTS Bundles (
	BUNDLE_ID					CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	BUNDLE_NAME					VARCHAR(64)		NOT NULL,
	TICKET_ID					CHAR(10),
	RENTAL_ID					CHAR(10),
	LODGE_ID					CHAR(10),
	LESSON_ID					CHAR(10),
	TOTAL_COST					NUMERIC(6, 2)	NOT NULL,
	PRIMARY KEY (BUNDLE_ID),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID),
	FOREIGN KEY (TICKET_ID) REFERENCES Tickets (TICKET_ID),
	FOREIGN KEY (RENTAL_ID) REFERENCES Rental_Item (RENTAL_ID),
	FOREIGN KEY (LODGE_ID) REFERENCES Lodges (LODGE_ID),
	FOREIGN KEY (LESSON_ID) REFERENCES Lessons (LESSON_ID)
);


CREATE TABLE IF NOT EXISTS Customer_Invoice (
	CUSTOMER_INVOICE_NUMBER		CHAR(10)		NOT NULL,
	CUSTOMER_ID					CHAR(10)		NOT NULL,
	TOTAL_COST					NUMERIC(6, 2)	NOT NULL,
	CUSTOMER_ORDER_DATE			date			NOT NULL,
	PRIMARY KEY(CUSTOMER_INVOICE_NUMBER),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES Customer(CUSTOMER_ID)
);


CREATE TABLE IF NOT EXISTS Customer_Invoice_Details (
	CUSTOMER_INVOICE_NUMBER		CHAR(10)		NOT NULL,
	PURCHASABLE_ID				CHAR(10)		NOT NULL,
	PURCHASING_COST				NUMERIC(6, 2)	NOT NULL,
	QUANTITY					INT				NOT NULL,
	FULL_COST					NUMERIC(6, 2)	NOT NULL,
	PRIMARY KEY(CUSTOMER_INVOICE_NUMBER, PURCHASABLE_ID),
	FOREIGN KEY(CUSTOMER_INVOICE_NUMBER) REFERENCES Customer_Invoice(CUSTOMER_INVOICE_NUMBER),
	FOREIGN KEY (PURCHASABLE_ID) REFERENCES Purchasable_Items (PURCHASABLE_ID)
);


CREATE VIEW IF NOT EXISTS Bundle_Details AS
SELECT
	b.BUNDLE_ID,
	b.BUNDLE_NAME,
	b.PURCHASABLE_ID,
	t.TICKET_ID,
	t.TICKET_NAME,
	ri.RENTAL_ID,
	ri.NAME AS "RENTAL_ITEM_NAME",
	l.LODGE_ID,
	l.LODGE_NAME,
	l2.LESSON_ID,
	l2.LESSON_NAME,
	TOTAL_COST
FROM
	Bundles b
JOIN
	Tickets t ON b.TICKET_ID = t.TICKET_ID
JOIN 
	Rental_Item ri ON b.RENTAL_ID = ri.RENTAL_ID
JOIN
	Lodges l ON b.LODGE_ID = l.LODGE_ID
JOIN 
	Lessons l2 ON b.LESSON_ID = l2.LESSON_ID;
	
CREATE VIEW IF NOT EXISTS Customer_Lessons AS
SELECT
    Customer.EMAIL,
    Customer.FIRST_NAME,
    Customer.LAST_NAME,
    Customer.PHONE_NUMBER,
    Customer.AGE,
    Lessons.LESSON_NAME,
    Lessons.LESSON_LEVEL,
    Lessons.PRICE,
    Lessons.INSTRUCTOR_NAME,
    Lessons.INSTRUCTOR_SKILL_LEVEL
FROM
    Customer
JOIN
    Lessons ON Customer.LESSON_ID = Lessons.LESSON_ID;